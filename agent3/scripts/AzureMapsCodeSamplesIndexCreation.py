from dotenv import load_dotenv
load_dotenv()

from common.constants import CONSTANTS
from common.helpers import get_project_root
from bs4 import BeautifulSoup
import os, json, shutil

def process_html_sample(file_path, category):
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Parse HTML
    soup = BeautifulSoup(content, 'html.parser')
    
    # Extract components
    return {
        "id": f"{category}_{file_path.stem}",
        "content_type": "sample",
        "category": category,
        "title": soup.find('title').text,
        "description": soup.find('meta', {'name': 'description'})['content'],
        "keywords": soup.find('meta', {'name': 'keywords'})['content'].split(','),
        "code_snippet": soup.find('script').string,  # Gets JavaScript code
        "api_reference": None,
        "content": content,  # Full file
        "vector": None  # Will be generated by Azure AI Search
    }

def create_samples_folder_upload():
    source_folder = os.path.join(get_project_root(), CONSTANTS.AGENT3.AZURE_MAPS_CODE_SAMPLES_FOLDER)
    destination_folder = os.path.join(get_project_root(), CONSTANTS.AGENT3.DATA_FOLDER, 'azure_maps_samples')

    # If folder exists, delete it, then create one
    if os.path.exists(destination_folder):
        shutil.rmtree(destination_folder)
    os.makedirs(destination_folder)
    
    counter = 0
    
    # Walk through all directories and subdirectories
    for root, dirs, files in os.walk(source_folder):
        for file in files:
            if file.lower().endswith(('.html', '.htm')):
                source_file = os.path.join(root, file)

                # Extract category (file root folder name) and store category - filename
                category = root.split("\\")[-2].replace("-", " ")
                destination_file = os.path.join(destination_folder, f"{category}-{file}")
                
                # Copy the file
                try:
                    shutil.copy2(source_file, destination_file)
                    counter += 1
                except Exception as e:
                    print(f"Error copying {source_file}: {str(e)}")
    print(f"Copied {counter} files to {destination_folder}")

if __name__ == "__main__":
    create_samples_folder_upload()